;; --------------------------------------------------
;; EMACS preferences
;; --------------------------------------------------

(global-font-lock-mode 1)

; Color Theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'twilight t)

; Set the default EMACS window size
(add-to-list 'default-frame-alist '(height . 50))
(add-to-list 'default-frame-alist '(width . 100))

;; Don't use TABS for indentations.
(setq-default indent-tabs-mode nil)

; Word-wrap at 80 characters					
(setq-default fill-column 80)
;; (setq-default word-wrap t)
;; (setq longlines-wrap-follows-window-size t)

;; Add Autofill mode to mode hooks.
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; Show line number in the mode line.
(line-number-mode 1)

;; Show column number in the mode line.
(column-number-mode 1)

;; Prevent the startup screen from opening
(setq inhibit-startup-screen t)

;; put save files into a common directory
;; see http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files 
(setq backup-directory-alist `(("." . "~/.emacs.d/auto-save-list/")))
(setq backup-by-copying t)

; This makes emacs backspace work in every environment, even Mac OS X
; in a shel.  Thanks to Morgan McGuire matrix@graphics3d.com
; http://graphics3d.com/guides/macs/index.html

(setq term-setup-hook
      '(lambda()
         (setq keyboard-translate-table "\C-@\C-a\C-b\C-c\C-d\C-e\C-f\C-g\C-?")
         (global-set-key "\M-h" 'help-for-help)))


(global-set-key (kbd "<s-backspace>") 'backward-kill-word)
(global-set-key (kbd "<s-f>") 'forward-kill-word)

;(global-set-key (read-kbd-macro "<M-DEL>") 'backward-kill-word)
;(global-set-key "<\M-f>" 'forward-word)
;(global-set-key "<M-f>" 'forward-word)
;(global-set-key (kbd "\M-f") 'forward-word)

; ; tell Emacs to only insert a single TAB when I hit the TAB key 
; (defun my-text-mode-hook ()
;   (define-key text-mode-map "\t" 'self-insert-command))
; (add-hook 'text-mode-hook 'my-text-mode-hook)
; (put 'downcase-region 'disabled nil)

;;(custom-set-variables
;; ;; custom-set-variables was added by Custom.
;; ;; If you edit it by hand, you could mess it up, so be careful.
;; ;; Your init file should contain only one such instance.
;; ;; If there is more than one, they won't work right.
;; '(custom-enabled-themes (quote (zenburn)))
;; '(custom-safe-themes
;;   (quote
;;    ("f37d09076188b2e8d2a6847931deec17f640853aedd8ea4ef3ac57db01335008" default))))
;;(custom-set-faces
;; ;; custom-set-faces was added by Custom.
;; ;; If you edit it by hand, you could mess it up, so be careful.
;; ;; Your init file should contain only one such instance.
;; ;; If there is more than one, they won't work right.
;; )

;; --------------------------------------------------
; Python preferences:
;; --------------------------------------------------
; (setq py-install-directory "~/.emacs.d/python-mode.el-6.2.0")
; (add-to-list 'load-path py-install-directory)
; (require 'python-mode)

;; use IPython
;(setq-default py-shell-name "ipython")
;(setq-default py-which-bufname "IPython")

(load-library "python")

(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))

(setq interpreter-mode-alist
      (cons '("python" . python-mode)
            interpreter-mode-alist)
      python-mode-hook
      '(lambda () (progn
                    (set-variable 'py-indent-offset 4)
                    (set-variable 'indent-tabs-mode nil))))

(add-hook 'python-mode-hook
	  (lambda () (define-key python-mode-map (kbd "<s-backspace>") 'backward-kill-word)))

; exlusively use spaces when indenting python code
;(smart-tabs-advice py-indent-line py-indent-offset)
;(smart-tabs-advice py-newline-and-indent py-indent-offset)
;(smart-tabs-advice py-indent-region py-indent-offset)

;; --------------------------------------------------
;; IDL preferences
;; --------------------------------------------------

(setq load-path (append `("/usr/local/share/emacs/site-lisp") load-path))

(autoload 'idlwave-mode "idlwave" "IDLWAVE Mode" t)
(autoload 'idlwave-shell "idlw-shell" "IDLWAVE Shell" t)
(setq auto-mode-alist  (cons '("\\.pro\\'" . idlwave-mode) auto-mode-alist))

(add-hook 'text-mode-hook 'turn-on-auto-fill)

(setq idlwave-file-header '(nil ";+\n; NAME:\n;\n;\n; PURPOSE:\n;\n;\n; CALLING SEQUENCE:\n;\n;\n; INPUTS:\n;\n;\n; OPTIONAL INPUTS:\n;\n;\n; KEYWORD PARAMETERS:\n;\n;\n; OUTPUTS:\n;\n;\n; OPTIONAL OUTPUTS:\n;\n;\n; COMMON BLOCKS:\n;\n;\n; PROCEDURES USED:\n;\n;\n; COMMENTS:\n;\n;\n; EXAMPLES:\n;\n;\n; MODIFICATION HISTORY:\n;\n;-\n"))

(add-hook 'idlwave-mode-hook
          (lambda ()
            (setq                        ; Set Options Here
	     idlwave-main-block-indent 4
	     idlwave-block-indent 3 ; blocks indent 3
	     idlwave-end-offset  -3 ; end of blocks indent -3
             ;; Gotta have that smart-continue-indenting
	     idlwave-max-extra-continuation-indent 0
             idlwave-header-to-beginning-of-file t
             idlwave-expand-generic-end t
             ;; Any self-respecting programmer indents his main block
	     idlwave-continuation-indent 2    ; additional indentation on continued lines
	     idlwave-indent-to-open-paren nil ; do not indent to innermost parenthesis
             idlwave-reserved-word-upcase nil ; Don't uppercase reserved words
             idlwave-surround-by-blank nil
             idlwave-pad-keyword nil
             font-lock-maximum-decoration t
             idlwave-shell-automatic-start t
	     idlwave-hanging-indent nil       ; get rid of hanging indent
             ;; A little trick to help fill routine descriptions with
             ;; fancy line delimiters (like =*=*=*=*...).     
             paragraph-separate "[ \t\f]*$\\|[ \t]*;+[ \t]*$\\|;+[+=-_*]+$"
)))

;-;; FORTRAN preferences
;-;
;-;;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
;-;;; Your init file should contain only one such instance.
;-;
;-;(custom-set-variables
;-; ;; custom-set-variables was added by Custom.
;-; ;; If you edit it by hand, you could mess it up, so be careful.
;-; ;; Your init file should contain only one such instance.
;-; ;; If there is more than one, they won't work right.
;-; '(ansi-color-names-vector ["#2d3743" "#ff4242" "#74af68" "#dbdb95" "#34cae2" "#008b8b" "#00ede1" "#e1e1e0"])
;-; '(custom-enabled-themes (quote (wheatgrass)))
;-; '(fortran-continuation-string "&")
;-; '(inhibit-startup-screen t)
;-; '(text-mode-hook (quote (turn-on-auto-fill my-text-mode-hook text-mode-hook-identify)))
;-; '(tool-bar-mode nil))
;-;(custom-set-faces
;-; ;; custom-set-faces was added by Custom.
;-; ;; If you edit it by hand, you could mess it up, so be careful.
;-; ;; Your init file should contain only one such instance.
;-; ;; If there is more than one, they won't work right.
;-; )

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(show-paren-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
