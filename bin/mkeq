#!/usr/bin/env python
"""
    mkeq [options] file

Description:
    Reads a LaTex coded from a file and creates a pdf document containing the 
    equation.  By default, the output file is named file.pdf, with any existing 
    extension on file removed.  There is also an option to set the output file 
    name.

    The input equation file should contain LaTex equation code which can be 
    placed in an eqnarray* environment.  For example, you might create a file 
    called sigma.tex containing:
        \Sigma(r) = A (r_0/r)^2
    Note, no other latex markup is required, such as \\begin{document} or a 
    \\documentclass declaration. Then running:
        mkeq sigma.tex
    will output a file called sigma.pdf

Restrictions:
    Python 2.3 or later is required due to the use of the built-in optparse 
    module.  The following programs are required to be in the user's path:
        latex
        dvips
        epstopdf
    Also, a UNIX like system is assumed in a few places. 

Modification History: 
    Created: 2007-10-31, Erin Sheldon, NYU.  Written in python.  This software 
    is in the public domain."""

import sys
import os
import tempfile
from optparse import OptionParser

parser=OptionParser(__doc__)

parser.add_option("-c","--color",default="black", 
    help="Color for the equation.  Must be supported by the latex "+\
    "color package.  Default is %default.")
parser.add_option("-o","--output",default=None, 
    help="Output file name.  Default is the same as the input file name "+\
    "but with a .pdf extension.")

verbose=False

def Exec(command):
    """Execute a command and exit if it fails"""
    ret = os.system(command)
    if verbose:
        print('------------- Command')
        print('         ',command)
    if ret != 0:
        print('Error executing command:',command)
        sys.exit(ret)

def GetNames(file, output=None):
    """Create temporary files and an output file name"""
    # Dictionary to hold names
    fdict = {}
    fdict['infile'] = file

    # strip off the extension
    base = os.path.basename(file)
    base = base.split('.')
    if len(base) > 1:
        base = '.'.join(base[0:-1])
    fdict['base'] = base

    # final output file
    if output is None:
        output = '{}.pdf'.format(base)
    fdict['pdfile'] = output

    # temporary directory. This creates dir and returns the name as a string
    tmpdir = tempfile.mkdtemp(prefix='mkeq-{}'.format(base))
    fdict['tmpdir'] = tmpdir
    fdict['tmptex'] = os.path.join(tmpdir, '{}.tex'.format(base))
    fdict['tmpdvi'] = os.path.join(tmpdir, '{}.dvi'.format(base))
    fdict['tmpeps'] = os.path.join(tmpdir, '{}.eps'.format(base))

    return fdict

def MakeTex(fdict):
    """Create a tex file containing the equation"""
    input = open(fdict['infile'], 'r')
    tmptex = open(fdict['tmptex'], 'w')

    tmptex.write('\documentclass[12pt]{article}\n')
    tmptex.write('\\usepackage{color}\n')
    tmptex.write('\\usepackage{amsmath}\n')
    tmptex.write('\pagestyle{empty}\n')
    tmptex.write('\pagecolor{white}\n')
    tmptex.write('\\begin{document}\n')
    tmptex.write('{\color{%s}\n' % (fdict['color'],))
    tmptex.write('\\begin{align*}\n')

    # Insert the equation
    for line in input:
        if line.strip() != '':
            tmptex.write(line)

    tmptex.write('\end{align*}}\n')
    tmptex.write('\end{document}\n')

    input.close()
    tmptex.close()

def MakePdf(fdict):
    """Run latex, dvips and epstopdf to create the output file"""
    # Run latex
    command = \
            'latex ' + \
            '--interaction=batchmode '+\
            '--output-directory=%s %s > /dev/null' % \
            (fdict['tmpdir'],fdict['tmptex'])
    Exec(command)
    # dvips, making a cropped eps file (-E)
    command = \
            'dvips -q -E -o %s %s' % (fdict['tmpeps'],fdict['tmpdvi'],)
    Exec(command)
    # epstopdf.  Better for eps than ps2pdf, it preserves bounding box
    command='epstopdf %s --outfile=%s' % (fdict['tmpeps'],fdict['pdfile'],)
    Exec(command)

def Cleanup(fdict):
    """Clean up the temporary files"""
    command = 'rm -r '+fdict['tmpdir']
    Exec(command)

#
# Main program
#

options, args = parser.parse_args(sys.argv[1:])

if len(args) < 1:
    parser.print_help()
    sys.exit(45)

file = args[0]

fdict = GetNames(file, output=options.output)
fdict['color'] = options.color

MakeTex(fdict)
MakePdf(fdict)
Cleanup(fdict)



